// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System;
using Microsoft.CodeAnalysis;

namespace Roslynator.CSharp
{
    public static partial class AnalyzerOptionDiagnosticDescriptors
    {
        /// <summary>RCS1014a</summary>
        public static readonly DiagnosticDescriptor UseImplicitlyTypedArrayWhenTypeIsObvious = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.UseImplicitlyTypedArrayWhenTypeIsObvious, 
            title:              "Use implicitly typed array (when type is obvious).", 
            messageFormat:      "Use implicitly typed array (when type is obvious).", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.UseImplicitlyTypedArrayWhenTypeIsObvious, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1014i</summary>
        public static readonly DiagnosticDescriptor UseImplicitlyTypedArray = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.UseImplicitlyTypedArray, 
            title:              "Use implicitly typed array.", 
            messageFormat:      "Use implicitly typed array.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.UseImplicitlyTypedArray, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1016a</summary>
        public static readonly DiagnosticDescriptor ConvertExpressionBodyToBlockBodyWhenExpressionIsMultiLine = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.ConvertExpressionBodyToBlockBodyWhenExpressionIsMultiLine, 
            title:              "Convert expression-body to block body when expression is multi-line.", 
            messageFormat:      "Convert expression-body to block body when expression is multi-line.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.ConvertExpressionBodyToBlockBodyWhenExpressionIsMultiLine, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1016b</summary>
        public static readonly DiagnosticDescriptor ConvertExpressionBodyToBlockBodyWhenDeclarationIsMultiLine = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.ConvertExpressionBodyToBlockBodyWhenDeclarationIsMultiLine, 
            title:              "Convert expression-body to block body when declaration is multi-line.", 
            messageFormat:      "Convert expression-body to block body when declaration is multi-line.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.ConvertExpressionBodyToBlockBodyWhenDeclarationIsMultiLine, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1018i</summary>
        public static readonly DiagnosticDescriptor RemoveAccessibilityModifiers = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.RemoveAccessibilityModifiers, 
            title:              "Remove accessibility modifiers.", 
            messageFormat:      "Remove accessibility modifiers.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.RemoveAccessibilityModifiers, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1036a</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyLineBetweenClosingBraceAndSwitchSection = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.RemoveEmptyLineBetweenClosingBraceAndSwitchSection, 
            title:              "Remove empty line between closing brace and switch section.", 
            messageFormat:      "Remove empty line between closing brace and switch section.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.RemoveEmptyLineBetweenClosingBraceAndSwitchSection, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1045a</summary>
        public static readonly DiagnosticDescriptor DoNotRenamePrivateStaticReadOnlyFieldToCamelCaseWithUnderscore = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.DoNotRenamePrivateStaticReadOnlyFieldToCamelCaseWithUnderscore, 
            title:              "Do not rename private static read-only field to camel case with underscore.", 
            messageFormat:      "Do not rename private static read-only field to camel case with underscore.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.DoNotRenamePrivateStaticReadOnlyFieldToCamelCaseWithUnderscore, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1050i</summary>
        public static readonly DiagnosticDescriptor RemoveArgumentListFromObjectCreation = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.RemoveArgumentListFromObjectCreation, 
            title:              "Remove argument list from object creation expression.", 
            messageFormat:      "Remove argument list from object creation expression.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.RemoveArgumentListFromObjectCreation, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1051a</summary>
        public static readonly DiagnosticDescriptor RemoveParenthesesFromConditionOfConditionalExpressionWhenExpressionIsSingleToken = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.RemoveParenthesesFromConditionOfConditionalExpressionWhenExpressionIsSingleToken, 
            title:              "Remove parentheses from condition of conditional expression (when condition is a single token).", 
            messageFormat:      "Remove parentheses from condition of conditional expression (when condition is a single token).", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.RemoveParenthesesFromConditionOfConditionalExpressionWhenExpressionIsSingleToken, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1078i</summary>
        public static readonly DiagnosticDescriptor UseStringEmptyInsteadOfEmptyStringLiteral = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.UseStringEmptyInsteadOfEmptyStringLiteral, 
            title:              "Use string.Empty instead of \"\".", 
            messageFormat:      "Use string.Empty instead of \"\".", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.UseStringEmptyInsteadOfEmptyStringLiteral, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1090i</summary>
        public static readonly DiagnosticDescriptor RemoveCallToConfigureAwait = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.RemoveCallToConfigureAwait, 
            title:              "Remove call to 'ConfigureAwait'.", 
            messageFormat:      "Remove call to 'ConfigureAwait'.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.RemoveCallToConfigureAwait, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1096i</summary>
        public static readonly DiagnosticDescriptor ConvertBitwiseOperationToHasFlagCall = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.ConvertBitwiseOperationToHasFlagCall, 
            title:              "Convert bitwise operation to 'HasFlag' call.", 
            messageFormat:      "Convert bitwise operation to 'HasFlag' call.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.ConvertBitwiseOperationToHasFlagCall, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1104a</summary>
        public static readonly DiagnosticDescriptor SimplifyConditionalExpressionWhenItIncludesNegationOfCondition = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.SimplifyConditionalExpressionWhenItIncludesNegationOfCondition, 
            title:              "Simplify conditional expression (when it includes negation of condition).", 
            messageFormat:      "Simplify conditional expression (when it includes negation of condition).", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.SimplifyConditionalExpressionWhenItIncludesNegationOfCondition, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1207i</summary>
        public static readonly DiagnosticDescriptor ConvertMethodGroupToAnonymousFunction = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.ConvertMethodGroupToAnonymousFunction, 
            title:              "Convert method group to anonymous function.", 
            messageFormat:      "Convert method group to anonymous function.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.ConvertMethodGroupToAnonymousFunction, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1246a</summary>
        public static readonly DiagnosticDescriptor DoNotUseElementAccessWhenExpressionIsInvocation = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.DoNotUseElementAccessWhenExpressionIsInvocation, 
            title:              "Do not use element access when expression is invocation.", 
            messageFormat:      "Do not use element access when expression is invocation.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.DoNotUseElementAccessWhenExpressionIsInvocation, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1248a</summary>
        public static readonly DiagnosticDescriptor UseIsNullPatternInsteadOfInequalityOperator = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.UseIsNullPatternInsteadOfInequalityOperator, 
            title:              "Use 'is null' pattern instead of '!=' operator.", 
            messageFormat:      "Use 'is null' pattern instead of '!=' operator.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.UseIsNullPatternInsteadOfInequalityOperator, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1248i</summary>
        public static readonly DiagnosticDescriptor UseComparisonInsteadOfIsNullPattern = DiagnosticDescriptorFactory.Default.Create(
            id:                 AnalyzerOptionDiagnosticIdentifiers.UseComparisonInsteadOfIsNullPattern, 
            title:              "Use comparison instead of 'is null' pattern.", 
            messageFormat:      "Use comparison instead of 'is null' pattern.", 
            category:           DiagnosticCategories.AnalyzerOption, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        AnalyzerOptionDiagnosticIdentifiers.UseComparisonInsteadOfIsNullPattern, 
            customTags:         Array.Empty<string>());

    }
}